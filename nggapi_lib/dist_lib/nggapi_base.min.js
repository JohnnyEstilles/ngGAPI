"use strict";var NgGapi;!function(a){!function(a){a[a.RETRY=0]="RETRY",a[a.FAIL=1]="FAIL"}(a.NoAccessTokenPolicy||(a.NoAccessTokenPolicy={}));a.NoAccessTokenPolicy;!function(a){a[a.ON_DEMAND=0]="ON_DEMAND",a[a.PRIOR_TO_EXPIRY=1]="PRIOR_TO_EXPIRY"}(a.TokenRefreshPolicy||(a.TokenRefreshPolicy={}));var b=(a.TokenRefreshPolicy,function(){function a(a,b,c,d,e,f,g,h,i,j,k,l){this.scopes=a,this.clientId=b,this.tokenRefreshPolicy=c,this.noAccesTokenPolicy=d,this.immediateMode=e,this.ownGetAccessTokenFunction=f,this.testingRefreshToken=g,this.testingClientSecret=h,this.$log=i,this.$window=j,this.$http=k,this.$timeout=l,this.sig="OauthService",this.isAuthInProgress=!1,this.isAuthedYet=!1,this.GAPI_RETRY_MS=200,f&&(this.getAccessToken=f),this.immediateMode&&(this.isAuthedYet=!0)}return a.prototype.getAccessToken=function(){return this.testingAccessToken?this.testingAccessToken:this.testingRefreshToken?(this.refreshAccessTokenUsingTestRefreshToken(this.testingRefreshToken,this.testingClientSecret),"!RETRY=1000"):this.isGapiLoaded()?this.$window.gapi.auth.getToken()&&this.$window.gapi.auth.getToken().access_token&&null!=this.$window.gapi.auth.getToken().access_token?this.$window.gapi.auth.getToken().access_token:(this.refreshAccessToken(),0==this.noAccesTokenPolicy?"!FAIL":"!RETRY="+this.noAccesTokenPolicy):(this.$log.warn("[O55] waiting for the gapi script to download"),void(this.testStatus="O55"))},a.prototype.refreshAccessToken=function(){var a=this;return this.isAuthInProgress?(this.$log.warn("[O75] refresh access token suppressed because there is already such a request in progress"),void(this.testStatus="O75")):this.isGapiLoaded()?(this.isAuthInProgress=!0,void this.$window.gapi.auth.authorize({client_id:this.clientId,scope:this.scopes,immediate:this.isAuthedYet},function(){a.refreshCallback()})):(this.$log.warn("[O81] gapi not yet loaded, retrying..."),this.testStatus="O81",void this.$timeout(function(){a.refreshAccessToken()},this.GAPI_RETRY_MS))},a.prototype.refreshAccessTokenUsingTestRefreshToken=function(a,b){var c=this;if(this.isAuthInProgress)return this.$log.warn("[O143] refresh access token suppressed because there is already such a request in progress"),void(this.testStatus="O143");this.isAuthInProgress=!0;var d="https://www.googleapis.com/oauth2/v3/token";this.$http({method:"POST",url:d,params:{client_id:encodeURI(this.clientId),client_secret:encodeURI(b),refresh_token:a,grant_type:"refresh_token",foo:"bar"},headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(a){c.testingAccessToken=a.access_token,c.$log.info("[O172]: test access token is "+c.testingAccessToken),c.isAuthInProgress=!1}).error(function(a,b){c.$log.error("[O191] problem refreshing test refresh token "+b+" "+a.error+" "+a.error_description)})},a.prototype.refreshCallback=function(){this.isAuthInProgress=!1,this.isAuthedYet=!0;var a=this.$window.gapi.auth.getToken();if(!a)return void this.$log.error("[O196] There is a problem that authorize has returned without an access token. Poss. access denied by user? ");if(1==this.tokenRefreshPolicy){var b=a.expires_in;this.$log.log("[O203] token will refresh after "+950*b+"ms"),setTimeout(this.refreshAccessToken,950*b),this.testStatus="O203"}},a.prototype.isGapiLoaded=function(){return this.$window.gapi&&this.$window.gapi.auth},a}());a.OauthService=b}(NgGapi||(NgGapi={})),NgGapi.Config=function(){var a,b,c=0,d=500,e=void 0,f=!1,g=void 0,h=void 0;return{setScopes:function(b){a=b},setClientID:function(a){b=a},setTokenRefreshPolicy:function(a){c=a},setNoAccessTokenPolicy:function(a){d=a},setImmediateMode:function(a){f=a},setGetAccessTokenFunction:function(a){e=a},setTestingRefreshToken:function(a){g=a},setTestingClientSecret:function(a){h=a},$get:function(){var i=angular.injector(["ng"]),j=i.get("$log"),k=i.get("$window"),l=i.get("$http"),m=i.get("$timeout");return new NgGapi.OauthService(a,b,c,d,f,e,g,h,j,k,l,m)}}},angular.module("ngm.NgGapi",[]);var NgGapi;!function(a){var b=function(){function a(a,b,c,d,e,f){this.$log=a,this.$http=b,this.$timeout=c,this.$interval=d,this.$q=e,this.OauthService=f,this.sig="HttpService",this.RETRY_COUNT=10,this.INTERVAL_NORMAL=10,this.INTERVAL_THROTTLE=500,this.INTERVAL_MAX=1500,this.isQueueMode=!0,this.queue=[],this.testStatus="foo"}return a.prototype.getOauthService=function(){return this.OauthService},a.prototype.get$http=function(){return this.$http},a.prototype.doHttp=function(a){var b=this.$q.defer();return this.isQueueMode?this.add2q(a,b,this.RETRY_COUNT):this._doHttp(a,b,this.RETRY_COUNT),b.promise},a.prototype.add2q=function(a,b,c){var d=this;console.log("adding "+a.method),this.queue.push({c:a,d:b,r:c}),this.queuePromise||(console.log("starting dq"),this.queuePromise=this.$interval(function(){d.dq()},this.queueInterval))},a.prototype.throttleDown=function(){var a=this;this.queueInterval==this.INTERVAL_NORMAL&&(this.queueInterval=this.INTERVAL_THROTTLE,console.log("starting throttling")),this.queuePromise&&(console.log("killing existing dq"),this.$interval.cancel(this.queuePromise)),this.queueInterval=this.INTERVAL_MAX,this.queueInterval>this.INTERVAL_MAX&&(this.queueInterval=this.INTERVAL_MAX),console.log("throttling at "+this.queueInterval),this.queuePromise=this.$interval(function(){a.dq()},this.queueInterval)},a.prototype.throttleUp=function(){var a=this;this.queueInterval!=this.INTERVAL_NORMAL&&(this.queuePromise&&(console.log("killing existing dq"),this.$interval.cancel(this.queuePromise)),this.queueInterval=.8*this.queueInterval,this.queueInterval<this.INTERVAL_NORMAL&&(this.queueInterval=this.INTERVAL_NORMAL),console.log("throttling at "+this.queueInterval),this.queuePromise=this.$interval(function(){a.dq()},this.queueInterval))},a.prototype.dq=function(){if(0==this.queue.length)return console.log("killing dq"),this.queueInterval=this.INTERVAL_NORMAL,this.$interval.cancel(this.queuePromise),void(this.queuePromise=void 0);console.log("processing item, qlen = "+this.queue.length);var a=this.queue[0];this.queue.splice(0,1),this._doHttp(a.c,a.d,a.r)},a.prototype._doHttp=function(a,b,c){var d=this;console.log("in _ with conf "+a.method),a.headers||(a.headers={});var e=this.OauthService.getAccessToken();if(e&&0!=e.indexOf("!FAIL")&&0!=e.indexOf("!RETRY=")){a.headers.Authorization="Bearer "+this.OauthService.getAccessToken();var f=this.$http(a);return f.success(function(a,e,f,g){return d.throttleUp(),d.$log.debug(e),a.nextPageToken?(b.notify(a),g.params.pageToken=a.nextPageToken,d._doHttp(g,b,c)):void b.resolve({data:a,configObject:g})}),void f.error(function(a,e,f,g,h){d.errorHandler(a,e,f,g,h,b,c)})}if(e&&0==e.indexOf("!FAIL"))b.reject("401 no access token");else{var g=e?e.replace("!RETRY=",""):500;this.sleep(+g).then(function(){d._doHttp(a,b,c)})}},a.prototype.errorHandler=function(a,b,c,d,e,f,g){var h=this;return 404==b?void f.reject(b+" "+a.error.message):401==b?(this.$log.warn("[H116] Need to acquire a new Access Token and resubmit"),this.OauthService.refreshAccessToken(),void(--g>0?this.sleep(2e3).then(function(){h._doHttp(d,f,g)}):f.reject(b+" "+a.error.message))):501==b?void(--g>0?this.sleep(1e3).then(function(){h._doHttp(d,f,g)}):f.reject(b+" "+a.error.message)):403==b&&a.error.message.toLowerCase().indexOf("rate limit")>-1?(this.$log.warn("[H153] 403 rate limit. requeuing retryConter = "+g),this.throttleDown(),void this.add2q(d,f,g)):void f.reject(b+" "+a.error.message)},a.prototype.sleep=function(a){var b=this.$q.defer();return this.$timeout(function(){b.resolve(0)},a),b.promise},a.$inject=["$log","$http","$timeout","$interval","$q","OauthService"],a}();a.HttpService=b}(NgGapi||(NgGapi={})),angular.module("ngm.NgGapi").service("HttpService",NgGapi.HttpService);